name: Release Publisher

on:
  release:
    types: [published]

env:
  PYPI_USER: "__token__"
  ACR_NAME: "pyiotutils"
  IMAGE_NAME: "pyiotutils-docs"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Action
        uses: actions/checkout@v2

      - name: Setup Python v3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Pip Install
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./dev-requirements.txt

      - name: Build and Publish IoT Edge Logger to PyPI
        if: contains(github.event.release.tag_name, 'iot-edge-logger')
        run: |
          pushd "./iot-edge-logger"
          python3 -m build
          twine upload dist/* -u ${{ env.PYPI_USER }} -p ${{ secrets.PYPI_API_TOKEN }}
          popd

      - name: Build and Publish IoT Edge Validator to PyPI
        if: contains(github.event.release.tag_name, 'iot-edge-validator')
        run: |
          pushd "./iot-edge-validator"
          python3 -m build
          twine upload dist/* -u ${{ env.PYPI_USER }} -p ${{ secrets.PYPI_API_TOKEN }}
          popd

      - name: Build and Publish IoT Samba Client to PyPI
        if: contains(github.event.release.tag_name, 'iot-samba-client')
        run: |
          pushd "./iot-samba-client"
          python3 -m build
          twine upload dist/* -u ${{ env.PYPI_USER }} -p ${{ secrets.PYPI_API_TOKEN }}
          popd

      - name: Build and Publish IoT Storage Client to PyPI
        if: contains(github.event.release.tag_name, 'iot-storage-client')
        run: |
          pushd "./iot-storage-client"
          python3 -m build
          twine upload dist/* -u ${{ env.PYPI_USER }} -p ${{ secrets.PYPI_API_TOKEN }}
          popd

      - name: ACR Build and Push
        uses: azure/acr-build@v1
        with:
          service_principal: ${{ secrets.AZURE_CLIENT_ID }}
          service_principal_password: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant: ${{ secrets.AZURE_TENANT_ID }}
          registry: ${{ env.ACR_NAME }}
          repository: ${{ env.IMAGE_NAME }}
          image: ${{ env.IMAGE_NAME }}
          folder: ./docs
          dockerfile: Dockerfile
          branch: master
